// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sklep_internetowy.Data;

#nullable disable

namespace Sklep_internetowy.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241105081136_AddImageUrl")]
    partial class AddImageUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sklep_internetowy.Models.ApplicationUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Kategorie");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Nazwa = "Zakąski"
                        },
                        new
                        {
                            CategoryId = 2,
                            Nazwa = "Dania główne"
                        },
                        new
                        {
                            CategoryId = 3,
                            Nazwa = "Przystawiki"
                        },
                        new
                        {
                            CategoryId = 4,
                            Nazwa = "Desery"
                        },
                        new
                        {
                            CategoryId = 5,
                            Nazwa = "Napoje"
                        });
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Skladniki");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Nazwa = "Wołowina"
                        },
                        new
                        {
                            IngredientId = 2,
                            Nazwa = "Kurczak"
                        },
                        new
                        {
                            IngredientId = 3,
                            Nazwa = "Ryba"
                        },
                        new
                        {
                            IngredientId = 4,
                            Nazwa = "Tortilla"
                        },
                        new
                        {
                            IngredientId = 5,
                            Nazwa = "Sałata"
                        },
                        new
                        {
                            IngredientId = 6,
                            Nazwa = "Pomidor"
                        });
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("Czas_zamowienia")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Kwota_zamowienia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UrzytkownikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("UrzytkownikId");

                    b.ToTable("Zamowienia");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ID_Zamowienie")
                        .HasColumnType("int");

                    b.Property<int>("ProduktId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ZamowienieOrderID")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("ProduktId");

                    b.HasIndex("ZamowienieOrderID");

                    b.ToTable("PrzedmiotZamowienia");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Id_Kategoria")
                        .HasColumnType("int");

                    b.Property<int>("Ilosc")
                        .HasColumnType("int");

                    b.Property<int?>("KategoriaCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Nazwa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url_zdj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("KategoriaCategoryId");

                    b.ToTable("Produkty");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Cena = 10.50m,
                            Id_Kategoria = 2,
                            Ilosc = 100,
                            Nazwa = "Taco z wołowiną",
                            Opis = "Smaczne taco z wołowiną",
                            Url_zdj = "https://via.placeholder.com/150"
                        },
                        new
                        {
                            ProductId = 2,
                            Cena = 8m,
                            Id_Kategoria = 2,
                            Ilosc = 120,
                            Nazwa = "Taco z kurczakiem",
                            Opis = "Smaczne taco z kurczakiem",
                            Url_zdj = "https://via.placeholder.com/150"
                        },
                        new
                        {
                            ProductId = 3,
                            Cena = 12.50m,
                            Id_Kategoria = 2,
                            Ilosc = 300,
                            Nazwa = "Taco z rybą",
                            Opis = "Smaczne taco z rybą",
                            Url_zdj = "https://via.placeholder.com/150"
                        });
                });

            modelBuilder.Entity("Sklep_internetowy.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProduktId")
                        .HasColumnType("int");

                    b.Property<int>("Id_skladnik")
                        .HasColumnType("int");

                    b.HasKey("ProduktId", "Id_skladnik");

                    b.HasIndex("Id_skladnik");

                    b.ToTable("Skladniki_Zamowienia");

                    b.HasData(
                        new
                        {
                            ProduktId = 1,
                            Id_skladnik = 1
                        },
                        new
                        {
                            ProduktId = 1,
                            Id_skladnik = 4
                        },
                        new
                        {
                            ProduktId = 1,
                            Id_skladnik = 5
                        },
                        new
                        {
                            ProduktId = 1,
                            Id_skladnik = 6
                        },
                        new
                        {
                            ProduktId = 2,
                            Id_skladnik = 2
                        },
                        new
                        {
                            ProduktId = 2,
                            Id_skladnik = 4
                        },
                        new
                        {
                            ProduktId = 2,
                            Id_skladnik = 5
                        },
                        new
                        {
                            ProduktId = 2,
                            Id_skladnik = 6
                        },
                        new
                        {
                            ProduktId = 3,
                            Id_skladnik = 3
                        },
                        new
                        {
                            ProduktId = 3,
                            Id_skladnik = 4
                        },
                        new
                        {
                            ProduktId = 3,
                            Id_skladnik = 5
                        },
                        new
                        {
                            ProduktId = 3,
                            Id_skladnik = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sklep_internetowy.Models.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Order", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.ApplicationUsers", "Urzytkownik")
                        .WithMany("Zamówienia")
                        .HasForeignKey("UrzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Urzytkownik");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.OrderItem", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.Product", "Produkt")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProduktId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sklep_internetowy.Models.Order", "Zamowienie")
                        .WithMany("Zamówiony_przedmiot")
                        .HasForeignKey("ZamowienieOrderID");

                    b.Navigation("Produkt");

                    b.Navigation("Zamowienie");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Product", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.Category", "Kategoria")
                        .WithMany("Produkty")
                        .HasForeignKey("KategoriaCategoryId");

                    b.Navigation("Kategoria");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.ProductIngredient", b =>
                {
                    b.HasOne("Sklep_internetowy.Models.Ingredient", "Skladnik")
                        .WithMany("skladniki_zamowienia")
                        .HasForeignKey("Id_skladnik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sklep_internetowy.Models.Product", "Produkt")
                        .WithMany("Skladniki_produktu")
                        .HasForeignKey("ProduktId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produkt");

                    b.Navigation("Skladnik");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.ApplicationUsers", b =>
                {
                    b.Navigation("Zamówienia");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Category", b =>
                {
                    b.Navigation("Produkty");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Ingredient", b =>
                {
                    b.Navigation("skladniki_zamowienia");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Order", b =>
                {
                    b.Navigation("Zamówiony_przedmiot");
                });

            modelBuilder.Entity("Sklep_internetowy.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Skladniki_produktu");
                });
#pragma warning restore 612, 618
        }
    }
}
